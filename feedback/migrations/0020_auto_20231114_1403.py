# Generated by Django 4.2.4 on 2023-11-14 08:33
import json
from django.db import migrations, transaction


def add_location_data(apps, schema_editor):
    State = apps.get_model("feedback", "State")
    District = apps.get_model("feedback", "District")
    SubDistrict = apps.get_model("feedback", "SubDistrict")
    Village = apps.get_model("feedback", "Village")

    with open("data/villages.json") as f:
        locations = json.loads(f.read())

    for state in locations.keys():
        print(f"State: {state}")
        with transaction.atomic():
            try:
                s = State.objects.create(name=state)
                for district in locations[state].keys():
                    d = District.objects.create(name=district, state=s)
                    for sub_district in locations[state][district].keys():
                        sub = SubDistrict.objects.create(name=sub_district, district=d)
                        for village in locations[state][district][sub_district]:
                            v = Village.objects.create(name=village, sub_district=sub)
            except Exception as e:
                print(e)


def add_departments(apps, schema_editor):
    Department = apps.get_model("feedback", "Department")

    DEPARTMENTS = [
        "Electricity",
        "Water & Sanitation",
        "Education",
        "Forest"
    ]

    for department in DEPARTMENTS:
        Department.objects.create(name=department)


def add_groups(apps, schema_editor):
    Group = apps.get_model("auth", "Group")

    Group.objects.create("Village Admin")
    Group.objects.create("Villager")
    Group.objects.create("District Admin")

class Migration(migrations.Migration):

    dependencies = [
        ('feedback', '0019_remove_village_district_alter_grievance_date_and_more'),
    ]

    operations = [
        migrations.RunPython(add_location_data),
        migrations.RunPython(add_departments),
        migrations.RunPython(add_groups),
    ]
